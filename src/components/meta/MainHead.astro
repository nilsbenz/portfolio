---
import { getLang, useTranslations } from "@/i18n/utils";
import "@/styles/global.css";
import "@fontsource-variable/outfit";
import { ClientRouter } from "astro:transitions";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const lang = getLang(Astro.currentLocale, Astro.url);
const t = useTranslations(lang);

const { title = "Nils Benz", description = t("meta.description") } =
  Astro.props;
---

<meta charset="UTF-8" />
<meta name="title" property="og:title" content={title} />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<ClientRouter />

<script is:inline>
  let observer = null;

  function getThemePreference() {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  function applyTheme() {
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  document.addEventListener("astro:before-swap", () => {
    if (observer) {
      observer.disconnect();
    }
  });
  document.addEventListener("astro:after-swap", applyTheme);
  applyTheme();
</script>
