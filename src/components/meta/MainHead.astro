---
import { getLang, useTranslations } from "@/i18n/utils";
import "@/styles/global.css";
import "@fontsource-variable/outfit";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  image?: string | undefined;
  noIndex?: boolean | undefined;
}

const lang = getLang(Astro.currentLocale, Astro.url);
const t = useTranslations(lang);

const {
  title = "Nils Benz",
  description = t("meta.description"),
  image = "/og-image.png",
  noIndex = false,
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="theme-color" content="#F2F2F2" />
<meta name="msapplication-TileColor" content="#F2F2F2" />
<meta
  name="keywords"
  content="Nils Benz, Software Entwickler, Developer, Zurich, St. Gallen"
/>
<meta name="author" content="Nils Benz" />

<title>{title}</title>
<meta name="title" property="og:title" content={title} />
<meta name="description" property="og:description" content={description} />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://nilsbenz.ch/" />
<meta property="og:site_name" content={title} />
<meta property="og:image" content={image} />
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={description} />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content="https://nilsbenz.ch/" />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image} />

{noIndex && <meta name="robots" content="noindex" />}
<link rel="sitemap" href="/sitemap-index.xml" />

<script is:inline>
  let observer = null;

  function getThemePreference() {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  function applyTheme() {
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    const themeColor = isDark ? "#0f0f0f" : "#F2F2F2";
    document
      .querySelector("meta[name=theme-color]")
      ?.setAttribute("content", themeColor);
    document
      .querySelector("meta[name=msapplication-TileColor]")
      ?.setAttribute("content", themeColor);

    if (typeof localStorage !== "undefined") {
      observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  applyTheme();
</script>
