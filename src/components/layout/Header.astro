---
import { getLang, useTranslations } from "@/i18n/utils";
import { cn } from "@/lib/utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import { ChevronRightIcon, GithubIcon } from "lucide-react";
import { buttonVariants } from "../ui/button";
import LanguageToggle from "./LanguageToggle.astro";
import ThemeToggle from "./ThemeToggle.astro";

const lang = getLang(Astro.currentLocale, Astro.url);
const t = useTranslations(lang);
---

<header class="w-full text-sm font-semibold">
  <div
    class="fixed top-0 right-0 left-0 z-30 mx-auto flex h-14 w-full items-center justify-between pr-1.5 pb-0.5 pl-2.5 lg:max-w-5xl"
  >
    <div
      id="header-bg"
      class="liquid-glass-border ease-out-expo border-foreground/10 bg-glass absolute -top-0.5 -right-0.5 bottom-0 -left-0.5 -z-10 backdrop-blur-lg lg:rounded-b-[1.625rem] [&.loaded]:transition-all [&.loaded]:duration-700"
    >
    </div>
    <a
      href={getRelativeLocaleUrl(lang, "/")}
      class="focus-visible:ring-ring/50 flex h-9 items-center gap-0.5 truncate rounded-full pr-2.5 pl-1 focus:outline-none focus-visible:ring-3"
    >
      <ChevronRightIcon className="text-primary size-5 shrink-0 stroke-3" />
      <h1 class="truncate text-lg font-semibold">nilsbenz</h1>
    </a>
    <nav class="flex items-center gap-4">
      <ul class="hidden items-center gap-1 md:flex">
        <li>
          <a
            href={getRelativeLocaleUrl(lang, "/")}
            class={cn(
              buttonVariants({ variant: "ghost" }),
              "hover:bg-accent/60",
            )}
          >
            {t("nav.home")}
          </a>
        </li>
        <li>
          <a
            href={getRelativeLocaleUrl(lang, "/projects/")}
            class={cn(
              buttonVariants({ variant: "ghost" }),
              "hover:bg-accent/60",
            )}
          >
            {t("nav.projects")}
          </a>
        </li>
        <li>
          <a
            href={getRelativeLocaleUrl(lang, "/about/")}
            class={cn(
              buttonVariants({ variant: "ghost" }),
              "hover:bg-accent/60",
            )}
          >
            {t("nav.about")}
          </a>
        </li>
      </ul>
      <div
        id="header-controls"
        class="liquid-glass-border ease-out-expo flex items-center gap-0.5 rounded-full p-[3px] transition-all duration-700"
      >
        <LanguageToggle />
        <ThemeToggle />
        <a
          href="https://github.com/nilsbenz/portfolio"
          target="_blank"
          class={cn(
            buttonVariants({ variant: "ghost", size: "icon" }),
            "hover:bg-accent/60",
          )}
        >
          <GithubIcon />
        </a>
      </div>
    </nav>
  </div>
  <div class="h-14 w-full"></div>
</header>

<script is:inline>
  let handleScroll = undefined;

  function isScrolled() {
    return window.scrollY > 16;
  }

  const initialControlsClasses = ["bg-glass", "backdrop-blur-xs"];
  const scrolledControlsClasses = ["bg-foreground/5", "dark:bg-foreground/7.5"];

  function addScrollListener() {
    const bgElement = document.getElementById("header-bg");
    const controlsElement = document.getElementById("header-controls");

    bgElement.style.transform = `translateY(${isScrolled() ? 0 : "-100%"})`;
    controlsElement.classList.add(
      ...(isScrolled() ? scrolledControlsClasses : initialControlsClasses),
    );

    handleScroll = function () {
      bgElement.style.transform = `translateY(${isScrolled() ? 0 : "-100%"})`;
      if (isScrolled()) {
        controlsElement.classList.remove(...initialControlsClasses);
        controlsElement.classList.add(...scrolledControlsClasses);
      } else {
        controlsElement.classList.remove(...scrolledControlsClasses);
        controlsElement.classList.add(...initialControlsClasses);
      }
    };
    document.addEventListener("scroll", handleScroll);

    setTimeout(() => {
      bgElement.classList.add("loaded");
    }, 200);
  }

  addScrollListener();
</script>
